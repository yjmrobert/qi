#!/bin/bash

# qi - Git Repository Script Manager
# Version: 1.0.0
# Description: Manages a cache of remote git repositories and allows quick execution of bash scripts by name

set -euo pipefail

# Script information
readonly SCRIPT_NAME="qi"
readonly SCRIPT_VERSION="1.0.0"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source library files
source "${SCRIPT_DIR}/lib/utils.sh"
source "${SCRIPT_DIR}/lib/config.sh"
source "${SCRIPT_DIR}/lib/cache.sh"
source "${SCRIPT_DIR}/lib/git-ops.sh"
source "${SCRIPT_DIR}/lib/script-ops.sh"
source "${SCRIPT_DIR}/lib/ui.sh"
source "${SCRIPT_DIR}/lib/commands.sh"

# Global variables
declare -g QI_VERBOSE=false
declare -g QI_DRY_RUN=false
declare -g QI_FORCE=false

# Display help message
show_help() {
    cat << EOF
qi - Git Repository Script Manager v${SCRIPT_VERSION}

USAGE:
    qi [OPTIONS] COMMAND [ARGS...]
    qi [OPTIONS] <script-name> [SCRIPT_ARGS...]

COMMANDS:
    add <url> [name]     Add a git repository to the cache
    remove <name>        Remove a repository from the cache
    update [name]        Update cached repositories (all if no name specified)
    list                 List all available scripts
    list-repos           List all cached repositories
    status               Show cache status and repository information
    help                 Show this help message

OPTIONS:
    -v, --verbose        Enable verbose output
    --dry-run           Show what would be done without executing
    --force             Force operations, override safety checks
    -h, --help          Show this help message

EXAMPLES:
    qi add https://github.com/user/scripts.git
    qi add https://github.com/user/tools.git devtools
    qi deploy
    qi update
    qi update devtools
    qi remove devtools
    qi list
    qi status

CONFIGURATION:
    Environment Variables:
        QI_CACHE_DIR        Override default cache directory (~/.qi/cache)
        QI_DEFAULT_BRANCH   Default branch to use (main/master)

    Configuration File: ~/.qi/config
        cache_dir=/path/to/cache
        default_branch=main
        auto_update=true
        verbose=false

For more information, see the README.md file.
EOF
}

# Parse command line arguments
parse_arguments() {
    local args=()
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -v|--verbose)
                QI_VERBOSE=true
                shift
                ;;
            --dry-run)
                QI_DRY_RUN=true
                shift
                ;;
            --force)
                QI_FORCE=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            --version)
                echo "${SCRIPT_NAME} ${SCRIPT_VERSION}"
                exit 0
                ;;
            -*)
                error "Unknown option: $1"
                echo "Use 'qi --help' for usage information."
                exit 1
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done
    
    # Set positional arguments
    set -- "${args[@]}"
    
    # Export global flags for use by other functions
    export QI_VERBOSE QI_DRY_RUN QI_FORCE
    
    # Process commands
    if [[ $# -eq 0 ]]; then
        show_help
        exit 1
    fi
    
    local command="$1"
    shift
    
    case "$command" in
        add)
            cmd_add "$@"
            ;;
        remove)
            cmd_remove "$@"
            ;;
        update)
            cmd_update "$@"
            ;;
        list)
            cmd_list "$@"
            ;;
        list-repos)
            cmd_list_repos "$@"
            ;;
        status)
            cmd_status "$@"
            ;;
        help)
            show_help
            exit 0
            ;;
        *)
            # Treat as script name
            cmd_execute_script "$command" "$@"
            ;;
    esac
}

# Command implementations
cmd_add() {
    if [[ $# -lt 1 ]]; then
        error "Usage: qi add <repository-url> [name]"
        exit 1
    fi
    
    local repo_url="$1"
    local repo_name="${2:-}"
    
    add_repository "$repo_url" "$repo_name"
}

cmd_remove() {
    if [[ $# -ne 1 ]]; then
        error "Usage: qi remove <repository-name>"
        exit 1
    fi
    
    local repo_name="$1"
    remove_repository "$repo_name"
}

cmd_update() {
    local repo_name="${1:-}"
    
    if [[ -n "$repo_name" ]]; then
        update_repository "$repo_name"
    else
        update_all_repositories
    fi
}

cmd_list() {
    list_scripts
}

cmd_list_repos() {
    list_repositories
}

cmd_status() {
    show_cache_status
}

cmd_execute_script() {
    if [[ $# -lt 1 ]]; then
        error "Usage: qi <script-name> [script-arguments...]"
        exit 1
    fi
    
    local script_name="$1"
    shift
    
    execute_script "$script_name" "$@"
}

# Main execution
main() {
    # Initialize configuration and cache
    init_config
    init_cache
    init_commands
    
    # Parse and execute command
    parse_arguments "$@"
}

# Error handling
trap 'error "An unexpected error occurred. Use -v for more details."' ERR

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi