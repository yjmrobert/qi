---
name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        bash-version: ['4.4', '5.0', '5.1', '5.2']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Bash ${{ matrix.bash-version }}
      run: |
        if [ "${{ matrix.bash-version }}" != "5.2" ]; then
          # Install specific bash versions for compatibility testing
          sudo apt-get update
          sudo apt-get install -y build-essential
          wget https://ftp.gnu.org/gnu/bash/bash-${{ matrix.bash-version }}.tar.gz
          tar -xzf bash-${{ matrix.bash-version }}.tar.gz
          cd bash-${{ matrix.bash-version }}
          ./configure --prefix=/usr/local/bash-${{ matrix.bash-version }}
          make && sudo make install
          sudo ln -sf /usr/local/bash-${{ matrix.bash-version }}/bin/bash /usr/local/bin/bash-${{ matrix.bash-version }}
        else
          # Use system bash for 5.2 (latest)
          sudo ln -sf /bin/bash /usr/local/bin/bash-${{ matrix.bash-version }}
        fi
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl wget shellcheck
        
    - name: Setup test environment
      run: |
        chmod +x qi
        chmod +x install.sh
        chmod +x test.sh
        chmod +x run_tests.sh
        chmod +x tests/*.sh
        chmod +x tools/bash_coverage.sh
        
    - name: Verify qi script syntax
      run: |
        bash -n qi
        bash -n install.sh
        bash -n test.sh
        bash -n run_tests.sh
        
    - name: Run basic functionality tests
      run: |
        export PATH="/usr/local/bin/bash-${{ matrix.bash-version }}:$PATH"
        bash-${{ matrix.bash-version }} test.sh
        
    - name: Run comprehensive test suite
      run: |
        export PATH="/usr/local/bin/bash-${{ matrix.bash-version }}:$PATH"
        bash-${{ matrix.bash-version }} run_tests.sh --verbose
        
    - name: Test installation script
      run: |
        # Test install script functions without actually installing
        bash -n install.sh
        echo "Installation script syntax check passed"
        
    - name: Upload coverage reports
      if: matrix.bash-version == '5.2'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: coverage/
        retention-days: 30
        
    - name: Generate coverage badge
      if: matrix.bash-version == '5.2'
      run: |
        if [ -f coverage/coverage.html ]; then
          # Extract coverage percentage from HTML report
          COVERAGE=$(grep -oP 'coverage: \K[0-9.]+' coverage/coverage.html || echo "0")
          echo "Coverage: ${COVERAGE}%"
          
          # Create coverage badge data
          mkdir -p .github/badges
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
            COLOR="yellow"
          else
            COLOR="red"
          fi
          
          # Create badge JSON
          cat > .github/badges/coverage.json << EOF
        {
          "schemaVersion": 1,
          "label": "coverage",
          "message": "${COVERAGE}%",
          "color": "$COLOR"
        }
        EOF
        fi

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl wget
        
    - name: Test qi installation
      run: |
        # Create a temporary directory for testing installation
        TEMP_DIR=$(mktemp -d)
        cd "$TEMP_DIR"
        
        # Copy install script to temp location
        cp "$GITHUB_WORKSPACE/install.sh" ./install.sh
        chmod +x install.sh
        
        # Test installation (dry run)
        echo "Testing installation script..."
        bash install.sh || true
        
    - name: Test qi with real repository
      run: |
        chmod +x qi
        export QI_CACHE_DIR="/tmp/qi-integration-test"
        
        # Test adding a real repository
        ./qi add https://github.com/octocat/Hello-World.git test-repo || true
        
        # Test listing repositories
        ./qi list-repos || true
        
        # Test status command
        ./qi status || true
        
        # Clean up
        rm -rf /tmp/qi-integration-test

  compatibility-test:
    name: OS Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl wget bash
        
    - name: Test qi basic functionality
      run: |
        chmod +x qi test.sh
        export QI_CACHE_DIR="/tmp/qi-compat-test-${{ matrix.os }}"
        
        # Test basic commands
        ./qi --help
        ./qi --version
        ./qi config
        
        # Run basic test suite
        ./test.sh
        
        # Clean up
        rm -rf "/tmp/qi-compat-test-${{ matrix.os }}"

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run ShellCheck
      run: |
        shellcheck qi install.sh test.sh run_tests.sh lib/*.sh tests/*.sh tools/*.sh || true
        
    - name: Check for secrets
      run: |
        # Basic secret scanning
        if grep -r -E "(password|secret|key|token)" --include="*.sh" --include="*.bash" . | grep -v "# " | grep -v test; then
          echo "⚠️  Potential secrets found in code"
          exit 1
        else
          echo "✅ No obvious secrets found"
        fi
        
    - name: Check file permissions
      run: |
        # Check for overly permissive files
        find . -type f -perm /o+w -not -path "./.git/*" | while read -r file; do
          echo "⚠️  World-writable file: $file"
        done
        
        # Verify executable files are properly set
        for script in qi install.sh test.sh run_tests.sh; do
          if [ ! -x "$script" ]; then
            echo "⚠️  Script not executable: $script"
          fi
        done

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check README completeness
      run: |
        # Check if README contains essential sections
        REQUIRED_SECTIONS=("Installation" "Usage" "Examples" "Contributing")
        
        for section in "${REQUIRED_SECTIONS[@]}"; do
          if ! grep -i "## $section\|# $section" README.md; then
            echo "⚠️  Missing section in README.md: $section"
          else
            echo "✅ Found section: $section"
          fi
        done
        
    - name: Check script documentation
      run: |
        # Check if main scripts have proper headers
        for script in qi install.sh test.sh run_tests.sh; do
          if head -10 "$script" | grep -q "^# .*- "; then
            echo "✅ $script has description"
          else
            echo "⚠️  $script missing description in header"
          fi
        done
        
    - name: Validate installation instructions
      run: |
        # Check if README installation instructions match install.sh
        if grep -q "curl.*install.sh.*bash" README.md; then
          echo "✅ README contains curl installation command"
        else
          echo "⚠️  README missing curl installation command"
        fi