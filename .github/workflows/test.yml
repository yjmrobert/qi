name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        bash-version: ['4.4', '5.0', '5.1', '5.2']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Bash ${{ matrix.bash-version }}
      run: |
        if [ "${{ matrix.bash-version }}" != "5.2" ]; then
          # Install specific bash versions for compatibility testing
          sudo apt-get update
          sudo apt-get install -y build-essential
          wget https://ftp.gnu.org/gnu/bash/bash-${{ matrix.bash-version }}.tar.gz
          tar -xzf bash-${{ matrix.bash-version }}.tar.gz
          cd bash-${{ matrix.bash-version }}
          ./configure --prefix=/usr/local/bash-${{ matrix.bash-version }}
          make && sudo make install
          sudo ln -sf /usr/local/bash-${{ matrix.bash-version }}/bin/bash /usr/local/bin/bash-${{ matrix.bash-version }}
        else
          # Use system bash for 5.2 (latest)
          sudo ln -sf /bin/bash /usr/local/bin/bash-${{ matrix.bash-version }}
        fi
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git curl wget shellcheck
        
    - name: Setup test environment
      run: |
        chmod +x qi
        chmod +x install.sh
        chmod +x test.sh
        chmod +x run_tests.sh
        chmod +x tests/*.sh
        chmod +x tools/bash_coverage.sh
        
    - name: Verify qi script syntax
      run: |
        bash -n qi
        bash -n install.sh
        bash -n test.sh
        bash -n run_tests.sh
        
    - name: Run basic functionality tests
      run: |
        export PATH="/usr/local/bin/bash-${{ matrix.bash-version }}:$PATH"
        bash-${{ matrix.bash-version }} test.sh
        
    - name: Run comprehensive test suite
      run: |
        export PATH="/usr/local/bin/bash-${{ matrix.bash-version }}:$PATH"
        # Disable coverage for now due to instrumentation issues breaking shunit2
        bash-${{ matrix.bash-version }} run_tests.sh --no-coverage --verbose
        
    - name: Test installation script
      run: |
        # Test install script functions without actually installing
        bash -n install.sh
        echo "Installation script syntax check passed"
        
    - name: Upload test results
      if: matrix.bash-version == '5.2'
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          *.log
          coverage/
        retention-days: 30
        if-no-files-found: warn