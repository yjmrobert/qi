name: Cleanup

on:
  schedule:
    # Run cleanup weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      cleanup-type:
        description: 'Type of cleanup to perform'
        required: true
        default: 'artifacts'
        type: choice
        options:
        - artifacts
        - cache
        - all

jobs:
  cleanup-artifacts:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    permissions:
      actions: write
      
    steps:
    - name: Cleanup old artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          // Get all artifacts
          const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
            owner,
            repo,
            per_page: 100
          });
          
          // Calculate cutoff date (30 days ago)
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - 30);
          
          let deletedCount = 0;
          
          for (const artifact of artifacts.artifacts) {
            const createdAt = new Date(artifact.created_at);
            
            if (createdAt < cutoffDate) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner,
                  repo,
                  artifact_id: artifact.id
                });
                
                console.log(`Deleted artifact: ${artifact.name} (${artifact.created_at})`);
                deletedCount++;
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
              }
            }
          }
          
          console.log(`Cleanup completed. Deleted ${deletedCount} old artifacts.`);

  cleanup-cache:
    name: Cleanup Old Cache
    runs-on: ubuntu-latest
    permissions:
      actions: write
      
    steps:
    - name: Cleanup old cache entries
      uses: actions/github-script@v6
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          try {
            // Get all cache entries
            const { data: caches } = await github.rest.actions.getActionsCacheList({
              owner,
              repo,
              per_page: 100
            });
            
            // Calculate cutoff date (7 days ago for cache)
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 7);
            
            let deletedCount = 0;
            
            for (const cache of caches.actions_caches) {
              const createdAt = new Date(cache.created_at);
              
              if (createdAt < cutoffDate) {
                try {
                  await github.rest.actions.deleteActionsCacheById({
                    owner,
                    repo,
                    cache_id: cache.id
                  });
                  
                  console.log(`Deleted cache: ${cache.key} (${cache.created_at})`);
                  deletedCount++;
                } catch (error) {
                  console.log(`Failed to delete cache ${cache.key}: ${error.message}`);
                }
              }
            }
            
            console.log(`Cache cleanup completed. Deleted ${deletedCount} old cache entries.`);
          } catch (error) {
            console.log(`Cache cleanup failed: ${error.message}`);
          }

  cleanup-workflow-runs:
    name: Cleanup Old Workflow Runs
    runs-on: ubuntu-latest
    permissions:
      actions: write
      
    steps:
    - name: Cleanup old workflow runs
      uses: actions/github-script@v6
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          // Get all workflows
          const { data: workflows } = await github.rest.actions.listRepoWorkflows({
            owner,
            repo
          });
          
          // Calculate cutoff date (90 days ago)
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - 90);
          
          let totalDeleted = 0;
          
          for (const workflow of workflows.workflows) {
            try {
              // Get workflow runs for this workflow
              const { data: runs } = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id: workflow.id,
                per_page: 100,
                status: 'completed'
              });
              
              let workflowDeleted = 0;
              
              for (const run of runs.workflow_runs) {
                const createdAt = new Date(run.created_at);
                
                // Keep successful runs longer, delete failed/cancelled runs sooner
                let shouldDelete = false;
                
                if (run.conclusion === 'success') {
                  // Keep successful runs for 90 days
                  shouldDelete = createdAt < cutoffDate;
                } else {
                  // Delete failed/cancelled runs after 30 days
                  const failedCutoff = new Date();
                  failedCutoff.setDate(failedCutoff.getDate() - 30);
                  shouldDelete = createdAt < failedCutoff;
                }
                
                if (shouldDelete) {
                  try {
                    await github.rest.actions.deleteWorkflowRun({
                      owner,
                      repo,
                      run_id: run.id
                    });
                    
                    workflowDeleted++;
                    totalDeleted++;
                  } catch (error) {
                    console.log(`Failed to delete run ${run.id}: ${error.message}`);
                  }
                }
              }
              
              if (workflowDeleted > 0) {
                console.log(`Deleted ${workflowDeleted} old runs for workflow: ${workflow.name}`);
              }
              
            } catch (error) {
              console.log(`Failed to process workflow ${workflow.name}: ${error.message}`);
            }
          }
          
          console.log(`Workflow run cleanup completed. Deleted ${totalDeleted} old runs.`);

  cleanup-summary:
    name: Cleanup Summary
    runs-on: ubuntu-latest
    needs: [cleanup-artifacts, cleanup-cache, cleanup-workflow-runs]
    if: always()
    
    steps:
    - name: Generate cleanup summary
      run: |
        echo "# Cleanup Summary" > cleanup-summary.md
        echo "" >> cleanup-summary.md
        echo "Cleanup completed on: $(date)" >> cleanup-summary.md
        echo "" >> cleanup-summary.md
        echo "## Jobs Status" >> cleanup-summary.md
        echo "" >> cleanup-summary.md
        
        if [ "${{ needs.cleanup-artifacts.result }}" = "success" ]; then
          echo "- ✅ Artifact cleanup: SUCCESS" >> cleanup-summary.md
        else
          echo "- ❌ Artifact cleanup: FAILED" >> cleanup-summary.md
        fi
        
        if [ "${{ needs.cleanup-cache.result }}" = "success" ]; then
          echo "- ✅ Cache cleanup: SUCCESS" >> cleanup-summary.md
        else
          echo "- ❌ Cache cleanup: FAILED" >> cleanup-summary.md
        fi
        
        if [ "${{ needs.cleanup-workflow-runs.result }}" = "success" ]; then
          echo "- ✅ Workflow runs cleanup: SUCCESS" >> cleanup-summary.md
        else
          echo "- ❌ Workflow runs cleanup: FAILED" >> cleanup-summary.md
        fi
        
        echo "" >> cleanup-summary.md
        echo "## Cleanup Policies" >> cleanup-summary.md
        echo "" >> cleanup-summary.md
        echo "- **Artifacts**: Deleted after 30 days" >> cleanup-summary.md
        echo "- **Cache**: Deleted after 7 days" >> cleanup-summary.md
        echo "- **Successful workflow runs**: Deleted after 90 days" >> cleanup-summary.md
        echo "- **Failed workflow runs**: Deleted after 30 days" >> cleanup-summary.md
        
        cat cleanup-summary.md
        
    - name: Upload cleanup summary
      uses: actions/upload-artifact@v4
      with:
        name: cleanup-summary
        path: cleanup-summary.md
        retention-days: 30