---
name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Get version from tag or input
      id: get-version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Check if pre-release
      id: check-prerelease
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if [[ "$VERSION" =~ -[a-zA-Z] ]] || [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
          echo "This is a pre-release"
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
          echo "This is a stable release"
        fi
        
    - name: Validate version format
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "‚ùå Invalid version format: $VERSION"
          echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
          exit 1
        fi
        echo "‚úÖ Version format is valid: $VERSION"
        
    - name: Check if version already exists
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        if git tag | grep -q "^$VERSION$"; then
          echo "‚ùå Tag $VERSION already exists"
          exit 1
        fi
        echo "‚úÖ Version $VERSION is new"
        
    - name: Update version in qi script
      run: |
        VERSION="${{ steps.get-version.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"
        
        # Update version in qi script
        sed -i "s/QI_VERSION=\"[^\"]*\"/QI_VERSION=\"$VERSION_NUMBER\"/" qi
        
        # Verify the change
        if grep -q "QI_VERSION=\"$VERSION_NUMBER\"" qi; then
          echo "‚úÖ Version updated in qi script"
        else
          echo "‚ùå Failed to update version in qi script"
          exit 1
        fi
        
    - name: Run tests before release
      run: |
        chmod +x qi test.sh run_tests.sh
        chmod +x tests/*.sh tools/*.sh
        
        # Run basic tests
        ./test.sh
        
        # Run comprehensive test suite
        ./run_tests.sh --no-coverage

  create-release-assets:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      asset-path: ${{ steps.create-assets.outputs.asset-path }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Update version in files
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"
        
        # Update version in qi script
        sed -i "s/QI_VERSION=\"[^\"]*\"/QI_VERSION=\"$VERSION_NUMBER\"/" qi
        
        # Update version in README if present
        if grep -q "Version.*:" README.md; then
          sed -i "s/\*\*Version\*\*:.*/**Version**: $VERSION_NUMBER/" README.md
        fi
        
    - name: Create release assets
      id: create-assets
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        ASSET_NAME="qi-$VERSION"
        ASSET_PATH="$ASSET_NAME.tar.gz"
        
        # Create temporary directory for packaging
        mkdir -p "$ASSET_NAME"
        
        # Copy essential files
        cp qi "$ASSET_NAME/"
        cp install.sh "$ASSET_NAME/"
        cp README.md "$ASSET_NAME/"
        cp -r lib "$ASSET_NAME/"
        
        # Create installation instructions
        {
          echo "qi - Git Repository Script Manager ${VERSION}"
          echo ""
          echo "Installation Instructions:"
          echo "========================="
          echo ""
          echo "Quick Installation:"
          echo "  curl -fsSL https://github.com/yjmrobert/qi/releases/download/${VERSION}/install.sh | bash"
          echo ""
          echo "Manual Installation:"
          echo "  1. Extract this archive: tar -xzf qi-${VERSION}.tar.gz"
          echo "  2. cd qi-${VERSION}"
          echo "  3. chmod +x qi install.sh"
          echo "  4. sudo ./install.sh"
          echo ""
          echo "Usage:"
          echo "  qi --help          # Show help"
          echo "  qi add <repo-url>  # Add repository"
          echo "  qi <script-name>   # Execute script"
          echo ""
          echo "For more information, see README.md or visit:"
          echo "https://github.com/yjmrobert/qi"
        } > "$ASSET_NAME/INSTALL.txt"
        
        # Create checksums
        {
          echo "# SHA256 Checksums for qi ${VERSION}"
          echo "# Generated on $(date -u)"
        } > "$ASSET_NAME/CHECKSUMS.txt"
        
        find "$ASSET_NAME" -type f -name "*.sh" -o -name "qi" -o -name "README.md" | while read -r file; do
          sha256sum "$file" >> "$ASSET_NAME/CHECKSUMS.txt"
        done
        
        # Create archive
        tar -czf "$ASSET_PATH" "$ASSET_NAME"
        
        # Generate final checksum for archive
        sha256sum "$ASSET_PATH" > "$ASSET_PATH.sha256"
        
        echo "asset-path=$ASSET_PATH" >> $GITHUB_OUTPUT
        echo "‚úÖ Release assets created: $ASSET_PATH"
        
    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: |
          qi-*.tar.gz
          qi-*.tar.gz.sha256
        retention-days: 90

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release-assets]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Download release assets
      uses: actions/download-artifact@v4
      with:
        name: release-assets
        
    - name: Generate release notes
      id: release-notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Get previous tag for changelog
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1 || echo "")
        
        # Create release notes
        cat > release-notes.md << EOF
        # qi $VERSION
        
        ## What's New
        
        EOF
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "### Changes since $PREVIOUS_TAG" >> release-notes.md
          echo "" >> release-notes.md
          
          # Get commits since last tag
          git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG..HEAD" >> release-notes.md || echo "- Initial release" >> release-notes.md
        else
          echo "### Initial Release" >> release-notes.md
          echo "" >> release-notes.md
          echo "- First release of qi - Git Repository Script Manager" >> release-notes.md
        fi
        
        cat >> release-notes.md << EOF
        
        ## Installation
        
        ### Quick Installation (Recommended)
        \`\`\`bash
        curl -fsSL https://github.com/yjmrobert/qi/releases/download/$VERSION/install.sh | bash
        \`\`\`
        
        ### Manual Installation
        1. Download and extract \`qi-$VERSION.tar.gz\`
        2. Run \`sudo ./install.sh\`
        
        ## Usage
        
        \`\`\`bash
        # Add a repository
        qi add https://github.com/user/scripts.git
        
        # List available scripts
        qi list
        
        # Execute a script
        qi script-name
        \`\`\`
        
        ## Verification
        
        Verify the integrity of downloaded files using the provided SHA256 checksums:
        \`\`\`bash
        sha256sum -c qi-$VERSION.tar.gz.sha256
        \`\`\`
        
        ## Support
        
        - üìñ [Documentation](https://github.com/yjmrobert/qi#readme)
        - üêõ [Report Issues](https://github.com/yjmrobert/qi/issues)
        - üí¨ [Discussions](https://github.com/yjmrobert/qi/discussions)
        EOF
        
        echo "Release notes generated"
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: qi ${{ needs.validate-release.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
        files: |
          qi-*.tar.gz
          qi-*.tar.gz.sha256
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-install-script:
    name: Update Install Script URLs
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: needs.validate-release.outputs.is-prerelease == 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update install script URLs
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Update install.sh to point to the new release
        sed -i "s|REPO_URL=\"https://github.com/yjmrobert/qi\"|REPO_URL=\"https://github.com/yjmrobert/qi\"|" install.sh
        
        # Update README installation command
        sed -i "s|curl -fsSL https://github.com/yjmrobert/qi/raw/main/install.sh|curl -fsSL https://github.com/yjmrobert/qi/releases/download/$VERSION/install.sh|g" README.md
        
        echo "‚úÖ Updated installation URLs for $VERSION"
        
    - name: Commit and push changes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add README.md install.sh
          git commit -m "Update installation URLs for $VERSION"
          git push
          echo "‚úÖ Committed installation URL updates"
        fi

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: always() && needs.create-github-release.result == 'success'
    
    steps:
    - name: Release notification
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        IS_PRERELEASE="${{ needs.validate-release.outputs.is-prerelease }}"
        
        if [ "$IS_PRERELEASE" = "true" ]; then
          echo "üöÄ Pre-release $VERSION has been published!"
        else
          echo "üéâ Release $VERSION has been published!"
        fi
        
        echo "üì¶ Release URL: ${{ github.server_url }}/${{ github.repository }}/releases/tag/$VERSION"
        echo "üì• Installation: curl -fsSL https://github.com/yjmrobert/qi/releases/download/$VERSION/install.sh | bash"